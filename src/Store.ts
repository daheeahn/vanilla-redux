import {Alert} from 'react-native';
import {createStore, compose, applyMiddleware} from 'redux';
import {createAction, createReducer} from '@reduxjs/toolkit';
import {composeWithDevTools} from 'redux-devtools-extension';
import thunk from 'redux-thunk';
// export const ADD_TODO = 'ADD_TODO';
// export const DELETE_TODO = 'DELETE_TODO';

const addToDo = createAction('ADD');
const deleteToDo = createAction('DELETE');
// console.log(addToDo(), deleteToDo);

// actionCreator
// const addToDo = text => {
//   return {
//     type: ADD_TODO,
//     text,
//   };
// };
// const deleteToDo = id => {
//   return {
//     type: DELETE_TODO,
//     id,
//   };
// };

// const reducer = (state = [], action) => {
//   // state: currentState
//   switch (action.type) {
//     case addToDo.type:
//       const newToDoObj = {text: action.payload, id: Date.now()}; // payloadÎ°ú Ï†ïÎ≥¥Í∞Ä Ïò®Îã§. (Í¥ÄÌñâ)
//       return [newToDoObj, ...state];
//     case deleteToDo.type:
//       const cleaned = state.filter(s => s.id !== action.payload);
//       return cleaned;
//     default:
//       return state;
//   }
// };

// ImmerÎùºÍ≥†ÌïòÎäî Í≤É ÏïÑÎûòÏÑú Î¶¨ÎçïÏä§ Ìà¥ÌÇ∑Ïù¥ ÎèåÏïÑÍ∞ÄÏÑú ÎêúÎã§,,, Í∑∏ÎûòÏÑú pushÎ°ú MutateÌï¥ÎèÑ Îí§ÏóêÏÑúÎäî [...state] Ïù¥Í±∞ Ìï¥Ï§ÑÍ±∞Ïïº.
// switch case Ïù¥Îü∞Í±∞ ÏóÜÍ≥†, Mutate or Return new state obj Ìï¥ÎèÑ ÎêòÍ≥†~ ÎÑàÎ¨¥ Ï¢ãÎã§.
const reducer = createReducer([], {
  // state mutateÎèÑ Ïâ¨ÏõåÏ†∏.
  [addToDo]: (state, action) => {
    console.log('üòç', action);
    const newToDo = {text: action.payload, id: Date.now()};
    state.push(newToDo); // createReducerÎäî Ïù¥Î†áÍ≤å mutateÌï¥ÎèÑ Í¥úÏ∞ÆÎã§!!!
    // *** mutate, not return!!!!!!!! // Î≠îÍ∞ÄÎ•º returnÌï† Îïê Íº≠ ÏÉàÎ°úÏùÄ stateÏó¨Ïïº Ìï¥. pushÌïòÎ©¥ Í∑∏ÎÉ• Mutate Îê† ÎøêÏù¥ÏßÄ!
  },
  [deleteToDo]: (state, action) =>
    state.filter(toDo => toDo.id !== action.payload), // *** or return new state
});

export const addToDoAsync = text => {
  return async (dispatch, getState) => {
    try {
      console.log('thunk addToDoAsync');
      dispatch(actionCreators.addToDo(text));
    } catch (e) {
      Alert.alert('addToDoAsync error', JSON.stringify(e));
    }
  };
};

export const deleteToDoAsync = id => {
  return async (dispatch, getState) => {
    try {
      console.log('thunk deleteToDoAsync');
      dispatch(actionCreators.deleteToDo(id));
    } catch (e) {
      Alert.alert('addToDoAsync error', JSON.stringify(e));
    }
  };
};

export const store = createStore(
  reducer,
  // https://medium.com/encored-technologies-engineering-data-science/react-native-%EB%94%94%EB%B2%84%EA%B9%85-%ED%99%98%EA%B2%BD-%EB%A7%8C%EB%93%A4%EA%B8%B0-7e46bfe89f6
  // Îî∞ÎùºÏÑú devtool ÏÑ§Ïπò
  composeWithDevTools(applyMiddleware(thunk)),
);
export const actionCreators = {
  addToDo,
  deleteToDo,
};
